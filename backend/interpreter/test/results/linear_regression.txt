# import general libs
import json
import requests

FEEDBACK_SERVER = 'http://localhost:8080/feedback'
DB_ADDR = './db/'

# data transfer dict
# set: target_hash <- data
# get: source_hash -> data
transfer = dict()

# props dict
# node_hash <- data
props = dict()

# function interfaces to communicate with user
def feedback(json_data={}):
    try:
        r = requests.post(FEEDBACK_SERVER, json=json_data)
        print('feedback res: ', r.status_code)
    except:
        print('feedback failed!')

# displays a popup in ui
def send_popup(data, user_hash=''):
    feedback({
            'status':200,
            'user_hash': user_hash,
            'data': {
                'type':'popup',
                'data':  json.dumps(data)
            }
        })

# updates user status in ui
def send_status(data, user_hash=''):
    feedback({
            'status':200,
            'user_hash': user_hash,
            'data': {
                'type':'status',
                'data':  data
            }
        })
    
# updates a node status in ui
def send_node_status(data, user_hash=''):
    feedback({
            'status':200,
            'user_hash': user_hash,
            'data': {
                'type':'node_status',
                'data':  json.dumps(data)
            }
        })

# set data in transfer
def setTransfer(hash, data):
    if hash == None or hash == '':
        raise Exception('Method: Set(), Cannot Transfer Data')
    transfer[hash] = data
    
# get data from transfer
def getTransfer(hash):
    if hash == None or hash == '':
        raise Exception('Method: Get(), Cannot Transfer Data')
    return transfer[hash]



props = json.loads('{"9e8b2493-df56-45c6-8f7a-30ab34a9f42c": [{"tag": "db_name", "data": ""}, {"tag": "X", "data": ""}, {"tag": "y", "data": ""}, {"tag": "test_portion", "data": "0.2"}], "04a83b8c-9274-4ae9-8255-464ccb03cc24": [], "b54c93e5-a5f3-436a-b978-dfc016affa83": []}')
import pandas as pd
from sklearn.model_selection import train_test_split

def csv(node_hash:str='9e8b2493-df56-45c6-8f7a-30ab34a9f42c', source_hash:str='', target_hash:str='04a83b8c-9274-4ae9-8255-464ccb03cc24'):
    send_status('preparing your data for training...')
    send_node_status({
        'node_hash':node_hash,
        'status':'active'
    })
    
    # db name
    db_name = str(props[node_hash][0]['data'])
    if not db_name.endswith('.csv'):
        db_name = db_name + '.csv'
    # features
    features = str(props[node_hash][1]['data'])
    features = features.replace(' ', '')
    features = features.split(',')
    # targets
    targets = str(props[node_hash][2]['data'])
    targets = targets.replace(' ', '')
    targets = targets.split(',')
    if len(targets) == 1:
        targets = targets[0]
    # test portion
    test_portion = float(props[node_hash][3]['data'])
    
    # Load and prepare the dataset.
    data = pd.read_csv(DB_ADDR + db_name)

    X = data[features].values  
    y = data[targets].values

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_portion, random_state=42)
    
    # transfer output
    setTransfer(target_hash, [X, y, X_train, X_test, y_train, y_test, [features, targets]])
    send_status('done loading dataset.')
    send_node_status({
        'node_hash':node_hash,
        'status':'done'
    })
    


from sklearn.linear_model import LinearRegression
import numpy as np

def linear_regression(node_hash:str='04a83b8c-9274-4ae9-8255-464ccb03cc24', source_hash:str='04a83b8c-9274-4ae9-8255-464ccb03cc24', target_hash:str='b54c93e5-a5f3-436a-b978-dfc016affa83'):
    send_node_status({
        'node_hash':node_hash,
        'status':'active'
    })
    send_status('training dataset with linear regression...')
    X, y, X_train, X_test, y_train, y_test, labels = getTransfer(source_hash)

    # Create and train the model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions
    Z = model.predict(X_test)

    # Create a range of values for X to plot the regression line
    xx = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
    yy = model.predict(xx)

    send_status('done training.')
    setTransfer(target_hash, [xx, yy, Z, [X_train, y_train], labels])
    send_node_status({
        'node_hash':node_hash,
        'status':'done'
    })
    


import matplotlib.pyplot as plt
import base64
from io import BytesIO

def line_graph(node_hash:str='b54c93e5-a5f3-436a-b978-dfc016affa83', source_hash:str='b54c93e5-a5f3-436a-b978-dfc016affa83', target_hash:str=''):
    send_node_status({
        'node_hash':node_hash,
        'status':'active'
    })
    send_status('generating plot on given model')
    
    xx, yy, _, train, labels = getTransfer(source_hash)
    
    plt.figure(figsize=(10, 6))
    if (train):
        X_train, y_train = train
        plt.scatter(X_train, y_train)
    plt.plot(xx, yy, color='red', linewidth=2, label='Regression Line')
    plt.title('Linear Regression Model.')
    if (labels): 
        plt.xlabel(labels[0][0])
        plt.ylabel(labels[1])
    else: 
        plt.xlabel('feature')
        plt.ylabel('target') 
    plt.legend()
    plt.grid()
    
    # Transfer to base64 image
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    img_str = base64.b64encode(buf.read()).decode('utf-8')
    buf.close()

    send_status('done generating plot.')
    send_node_status({
        'node_hash':node_hash,
        'status':'done'
    })
    send_popup(data={'data':img_str, 'title':'Decision Boundary', 'type':'base64'})




csv()
linear_regression()
line_graph()
